// Copyright 2023 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package qrlapi

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"math/big"
	"os"
	"path/filepath"
	"reflect"
	"slices"
	"testing"
	"time"

	"github.com/stretchr/testify/require"
	walletmldsa87 "github.com/theQRL/go-qrllib/wallet/ml_dsa_87"
	qrl "github.com/theQRL/go-zond"
	"github.com/theQRL/go-zond/accounts"
	"github.com/theQRL/go-zond/common"
	"github.com/theQRL/go-zond/common/hexutil"
	"github.com/theQRL/go-zond/consensus"
	"github.com/theQRL/go-zond/consensus/beacon"
	"github.com/theQRL/go-zond/core"
	"github.com/theQRL/go-zond/core/bloombits"
	"github.com/theQRL/go-zond/core/rawdb"
	"github.com/theQRL/go-zond/core/state"
	"github.com/theQRL/go-zond/core/types"
	"github.com/theQRL/go-zond/core/vm"
	"github.com/theQRL/go-zond/crypto"
	"github.com/theQRL/go-zond/crypto/pqcrypto"
	"github.com/theQRL/go-zond/event"
	"github.com/theQRL/go-zond/internal/blocktest"
	"github.com/theQRL/go-zond/params"
	"github.com/theQRL/go-zond/qrldb"
	"github.com/theQRL/go-zond/rpc"
)

func testTransactionMarshal(t *testing.T, tests []txData, config *params.ChainConfig) {
	t.Parallel()
	var (
		signer = types.LatestSigner(config)
		key, _ = pqcrypto.HexToWallet("b71c71a67e1177ad4e901695e1b4b9ee17ae16c6668d313eac2f96dbcda3f291")
	)

	for i, tt := range tests {
		var tx2 types.Transaction
		tx, err := types.SignNewTx(key, signer, tt.Tx)
		if err != nil {
			t.Fatalf("test %d: signing failed: %v", i, err)
		}
		// Regular transaction
		if data, err := json.Marshal(tx); err != nil {
			t.Fatalf("test %d: marshalling failed; %v", i, err)
		} else if err = tx2.UnmarshalJSON(data); err != nil {
			t.Fatalf("test %d: sunmarshal failed: %v", i, err)
		} else if want, have := tx.Hash(), tx2.Hash(); want != have {
			t.Fatalf("test %d: stx changed, want %x have %x", i, want, have)
		}

		// rpcTransaction
		rpcTx := newRPCTransaction(tx, common.Hash{}, 0, 0, nil, config)
		if data, err := json.Marshal(rpcTx); err != nil {
			t.Fatalf("test %d: marshalling failed; %v", i, err)
		} else if err = tx2.UnmarshalJSON(data); err != nil {
			t.Fatalf("test %d: unmarshal failed: %v", i, err)
		} else if want, have := tx.Hash(), tx2.Hash(); want != have {
			t.Fatalf("test %d: tx changed, want %x have %x", i, want, have)
		} else {
			want, have := tt.Want, string(data)
			require.JSONEqf(t, want, have, "test %d: rpc json not match, want %s have %s", i, want, have)
		}
	}
}

func TestTransaction_RoundTripRpcJSON(t *testing.T) {
	var (
		config = params.AllBeaconProtocolChanges
		tests  = allTransactionTypes(common.Address{0xde, 0xad}, config)
	)
	testTransactionMarshal(t, tests, config)
}

type txData struct {
	Tx   types.TxData
	Want string
}

func allTransactionTypes(addr common.Address, config *params.ChainConfig) []txData {
	return []txData{
		{
			Tx: &types.DynamicFeeTx{
				ChainID:   config.ChainID,
				Nonce:     5,
				GasTipCap: big.NewInt(6),
				GasFeeCap: big.NewInt(9),
				Gas:       7,
				To:        &addr,
				Value:     big.NewInt(8),
				Data:      []byte{0, 1, 2, 3, 4},
				AccessList: types.AccessList{
					types.AccessTuple{
						Address:     common.Address{0x2},
						StorageKeys: []common.Hash{types.EmptyRootHash},
					},
				},
				Signature:  []byte{},
				PublicKey:  []byte{},
				Descriptor: []byte{},
			},
			Want: `{
				"blockHash": null,
				"blockNumber": null,
				"from": "Q3c1ec308389c73bc350f8f739c40d793d72bf633",
				"gas": "0x7",
				"gasPrice": "0x9",
				"maxFeePerGas": "0x9",
				"maxPriorityFeePerGas": "0x6",
				"hash": "0x1c783ada5ccd9229bd22acaa74a59b6987b308da7aaa890f74a36d3ec126ca91",
				"input": "0x0001020304",
				"nonce": "0x5",
				"to": "Qdead000000000000000000000000000000000000",
				"transactionIndex": null,
				"value": "0x8",
				"type": "0x2",
				"accessList": [
					{
						"address": "Q0200000000000000000000000000000000000000",
						"storageKeys": [
							"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"
						]
					}
				],
				"chainId": "0x539",
				"signature": "",
				"publicKey": "0x86d8688580bd2dfa1325dea9cf8b663c1a012898e6cb2cd55f0c235589979136244f7d19ea9f73de14237ad8115bba47bde31d201f691ea61ecf439f6a5341a539708f7276748fedf41e5eaaf32607068d36b60af0fef3280fc83066d2b54f654ccb79886814c096b97745d41d04239bf72f05854b16941612120bf3988ca817fc64d49318b016b237a08b0c9cfd6b6ae7b50ae1518551ed439b41b37e1c2a0a03a6ef5792cee6da5d4777b146d496f5ececdbd0bfa7cad22308ff589286688ec419d5e2e6c44e67975478f9dcff377cee5243c5da9e45133af3874c4cd09afb083ad4a44e14b3c80e200809daa0a37e186f205fa1a3855fc7ab2eb2aef62093edd69c6126458d6889e74929d2d0defe9120c3ff9b0fec6097538ec865316bdd3e3a60a72597c87d0f35785d12857a39b178df0751594c883a4e8348b64812f8a5625ebfff12394aa0224c0c7bdb05d7d05babf17d5b68b84a145f9659294674b8dbcfff4383bb48377d843fd2cd1b544f783b60f58c917067c8e61b63cadd058a88c342bba412dcdadc9cbda7be2b3eb7ccb91088d06826023d1b34ec13874604410db592356246e497879b43ce08d2272c95f74c470da36128340bc9c804935f1cd179c50c327826b286cad2ef8c3259d80fa12ea04ea519ad974b364381ede74930843d29857719f9895a49b4ef064c64febe48cad1a7c78b8221cce138794018262294cd6944bf2288ac4dcd6afa7e10bed5ab986f4dfc980e9a884d57d3094b4f12698ec3b4584a95fb4fe177b9bf77fbcdf0ee6fd76f94607d22a570d7e90ccdaaffb488420706427d067d0566e371411da44c17960826d4a06b7ae1e437514f3fdec246565bb435aabc1ddf9e4fae96642bce02dd9145c90180eba0c6c40a5e3a1b1a25608f9f853d4042cd43c6fa81d5ee71f2fe9531c47185eacedd556d938b4b38d578a62c5a1cbb438dc056801027fe06d52e30f62b35109eac568fb0fac6f7f45e54999557a34fd2e600881e8ff3ce71c493ed3271d59492d2e24f803216b02cb7d847a7ee9eebc906bbe2785716033a01128bb8175c3ace06ed4a2f21a94f7ef8b054d2380d06f0254cb826dbeee2655a703acb6eb5a5f96c7e1f0f0b45b2b778d25f300aa8d878af323e0837bebdab4214fcd20c7e8f9b7559126e3df62d39f916d88b5107cc064a22e402f9c634cbf1bbf7f21174423d19eeec4021b5248c1287140fc0cf40cf58bc0479bf64a90cead318ef8490a99a43698d4d1dd3ead299b9e19ad85b1e1c6a49bdfcf3f56945f6994e44421b5417881db981fcd60ecece2eea3a7309918dd342ca225c685e6b22134366e6e61afa8385fc13533f48f9da06ffb06671d55ec4cc82f1b86256f5e39b51b0ca07c0e33e57df47675dc54b2b062ea49465c2a6a2162f5a1b92eb4e8b28a15d9ffed6a3f61b38bca446bae0f88099c46e656c3fb9238406e36ede7c0a2fd51335e63ffe1a57b874c46e1e54f1f9d2ea415a8317a791e2a042ae4740c2060eacc16c12e1bd29a1a7249b71de15426efed92f6893db1d13108b74678f975f71051c752ec1f30e5cea2ccf08e2e9a606a192cb6fda8ae764f8541e9a89855353b008fb6ba7e3b146f6fbffc9b10072afa39e0f677845ab5a5e09abb7ea7effab4410090c7311788347d9b91cb8b278cc559253ed83bccbbdf3a901ac4c7c2c8bbcb531097518b9f44cc0683f823ad20700714d886270bece6fab98e0310c9821c4290cae19fe399455f26c561e21cda3431321759eb6546c4debd28ccfb5a1183ae5a5fe51f5d5a69088cc49635504d103d6b98f17ae7cb23a97c10db62840581a505ad23df06bf8a8a879002702b23bf8f4079ea8c30c2d0d9514db0ae6a99e32df1fdd3d6727735fab3a89e586f0558a4a619c2c0539c808024b73fbb73810758e3006fa37963d149bf6c9277e5c517ef7ad8aa603374ab714c2179bbfffbf2fbedb6525b5576bf61001f74f4be1f6c6c38a035da4dd97cca3aac8f385d0ccb241c32bdc971fc599e63100295bf7b1a3aa1ded9669f7ea197ae9e191dc967c1a9361337b493b4395ca8f9dc7582cbdc7c8838ec1dd376d916e896f3109170543399771a75b6f6be27fd1f820dbe8ae17a3be7c184c8dfc2687f0a1b91b96f029f3e10bdb33e02154fc2c587fa99315e0378cdd387d5b7470bcba1f146539fe9c79afc3aaef0c3ffe02b96cc5ff1e9ec3e3e0ac984f17fadb7d15210c8fe8505420b0b3fd60f1269f6d5530aa6f7356f62a7a860c6f238fd57b3329560d19e35443b1238e3eab2b2f5cd19c1ca6e01428c6784e985bc26f6698540f65987dc9cf616ad1f4ef15b5e0e4ce31bfa7c28567d7909aeb3300abb7fe2445cf1a03919532ff56cd47aaf98a6b82ee589cf4ac92c1c42902880242c77481f627b5ccb0c98067cc257e28e10ab76d32ab31bea16894a9f3b814ed755f18d4aabdfd2f6a53308b146e3aea30d8a89edd5d134355c90b62c5c0be711d1b669125c26e96c7f9e6fabd8d03102a3e2edd6be27be9731083e2c03b9e907a0a77f450fe76ecbe2e2e4ec033d4d921ae1544187805529bc5fa71090bcfd205785c364f3c8febb255000a6d9cb10408441b402f6c878a52f10113b271189d2ad2b4850e34862575fbcb5078f9533bd71276e1689b2203a0e4a02a81729fd841fe95e38fc4d619e433ba1809b1684329e3c258f63477ddcab14251458f73bb19469db62a68c2ee14dcd64afb918c06831b5f84665f4070b3e163e24bb40e644195811aba50294c72c4d350b5c0379917116b254bd1e70012548ddc155e947c512d9c76d743c684ef55621de7f248c1f01b920958233e3a6627c78fb79334caadefb62a83cf8a7e0d300a0064d6f236ff915f08a6830956a28801e9f3cc44da6ce1b2ce9d4a33918a1923c3945aecaf5b5fa6f67a7b2205854338e11f611dd46874ecfcc8e047e4fc7acb0181691ce3b47c10da907d5c94c3d2d513334f96cf7af05971a00462948e5960939149a36820163ae174257bd95619984841104da69db9459994c2ed95ecbc2525abf9b31581da5fda4d26611e6db65a6058285fb9bae4092773fb51eb7c96fec43a9fb0224bdf85df832f39d508a2667f8bc57c4bf3fef795490bc72884abf6ab811fabe8c7633037de916770e7ab1c3fd23fb0e68def066eb61be05d745ce2eba2dcdfb5a4bf2bb642efbb679f64ebfb0214ceb2c6df68028effa5a2352efe006e282820d8ab04d5297d9987c4f9c60e11e66f07509c78e8fa5b69abc9e0f1808f47f7aab5bd00f299217b9053e4b33d1857be7860239f1e24fd94ee646eaa86dd4bed6b14feb961791f1f337656d4929bab745292ed5b8a422018af6373be399e707ff3972c2084db4fb7d3951cf66837fa67054f7bc08cb223c648050c7e033dcfc3acb22c644595a256207a00d6f9225a5b545cb4ff0b648933506d89d7639ed8e06f782122b1596c82bb3d4b6a349d068b53ad68091d6b7296da632a03c60f0a5a202c951c0a6c5a0b31df1b55e10df24b3565ae4bd936f6a2ede1a1b082253acf6fade2819695d3d5971788e325418b79e233d9e85c9be206694f21bfd163e6aa8986c3b10d94bcff28058156ff15102d9ab4fdc1508bd8c19a4754064547b47fba",
				"descriptor": "0x010000"
			}`,
		},
		{
			Tx: &types.DynamicFeeTx{
				ChainID:    config.ChainID,
				Nonce:      5,
				GasTipCap:  big.NewInt(6),
				GasFeeCap:  big.NewInt(9),
				Gas:        7,
				To:         nil,
				Value:      big.NewInt(8),
				Data:       []byte{0, 1, 2, 3, 4},
				AccessList: types.AccessList{},
				Signature:  []byte{},
				PublicKey:  []byte{},
				Descriptor: []byte{},
			},
			Want: `{
					"blockHash": null,
					"blockNumber": null,
					"from": "Q3c1ec308389c73bc350f8f739c40d793d72bf633",
					"gas": "0x7",
					"gasPrice": "0x9",
					"maxFeePerGas": "0x9",
					"maxPriorityFeePerGas": "0x6",
					"hash": "0x05379c44dce873fbdb1b49cb7849a1cc2855b33550fb2d8e8d67681609e295e2",
					"input": "0x0001020304",
					"nonce": "0x5",
					"to": null,
					"transactionIndex": null,
					"value": "0x8",
					"type": "0x2",
					"accessList": [],
					"chainId": "0x539",
					"signature": "",
					"publicKey": "0x86d8688580bd2dfa1325dea9cf8b663c1a012898e6cb2cd55f0c235589979136244f7d19ea9f73de14237ad8115bba47bde31d201f691ea61ecf439f6a5341a539708f7276748fedf41e5eaaf32607068d36b60af0fef3280fc83066d2b54f654ccb79886814c096b97745d41d04239bf72f05854b16941612120bf3988ca817fc64d49318b016b237a08b0c9cfd6b6ae7b50ae1518551ed439b41b37e1c2a0a03a6ef5792cee6da5d4777b146d496f5ececdbd0bfa7cad22308ff589286688ec419d5e2e6c44e67975478f9dcff377cee5243c5da9e45133af3874c4cd09afb083ad4a44e14b3c80e200809daa0a37e186f205fa1a3855fc7ab2eb2aef62093edd69c6126458d6889e74929d2d0defe9120c3ff9b0fec6097538ec865316bdd3e3a60a72597c87d0f35785d12857a39b178df0751594c883a4e8348b64812f8a5625ebfff12394aa0224c0c7bdb05d7d05babf17d5b68b84a145f9659294674b8dbcfff4383bb48377d843fd2cd1b544f783b60f58c917067c8e61b63cadd058a88c342bba412dcdadc9cbda7be2b3eb7ccb91088d06826023d1b34ec13874604410db592356246e497879b43ce08d2272c95f74c470da36128340bc9c804935f1cd179c50c327826b286cad2ef8c3259d80fa12ea04ea519ad974b364381ede74930843d29857719f9895a49b4ef064c64febe48cad1a7c78b8221cce138794018262294cd6944bf2288ac4dcd6afa7e10bed5ab986f4dfc980e9a884d57d3094b4f12698ec3b4584a95fb4fe177b9bf77fbcdf0ee6fd76f94607d22a570d7e90ccdaaffb488420706427d067d0566e371411da44c17960826d4a06b7ae1e437514f3fdec246565bb435aabc1ddf9e4fae96642bce02dd9145c90180eba0c6c40a5e3a1b1a25608f9f853d4042cd43c6fa81d5ee71f2fe9531c47185eacedd556d938b4b38d578a62c5a1cbb438dc056801027fe06d52e30f62b35109eac568fb0fac6f7f45e54999557a34fd2e600881e8ff3ce71c493ed3271d59492d2e24f803216b02cb7d847a7ee9eebc906bbe2785716033a01128bb8175c3ace06ed4a2f21a94f7ef8b054d2380d06f0254cb826dbeee2655a703acb6eb5a5f96c7e1f0f0b45b2b778d25f300aa8d878af323e0837bebdab4214fcd20c7e8f9b7559126e3df62d39f916d88b5107cc064a22e402f9c634cbf1bbf7f21174423d19eeec4021b5248c1287140fc0cf40cf58bc0479bf64a90cead318ef8490a99a43698d4d1dd3ead299b9e19ad85b1e1c6a49bdfcf3f56945f6994e44421b5417881db981fcd60ecece2eea3a7309918dd342ca225c685e6b22134366e6e61afa8385fc13533f48f9da06ffb06671d55ec4cc82f1b86256f5e39b51b0ca07c0e33e57df47675dc54b2b062ea49465c2a6a2162f5a1b92eb4e8b28a15d9ffed6a3f61b38bca446bae0f88099c46e656c3fb9238406e36ede7c0a2fd51335e63ffe1a57b874c46e1e54f1f9d2ea415a8317a791e2a042ae4740c2060eacc16c12e1bd29a1a7249b71de15426efed92f6893db1d13108b74678f975f71051c752ec1f30e5cea2ccf08e2e9a606a192cb6fda8ae764f8541e9a89855353b008fb6ba7e3b146f6fbffc9b10072afa39e0f677845ab5a5e09abb7ea7effab4410090c7311788347d9b91cb8b278cc559253ed83bccbbdf3a901ac4c7c2c8bbcb531097518b9f44cc0683f823ad20700714d886270bece6fab98e0310c9821c4290cae19fe399455f26c561e21cda3431321759eb6546c4debd28ccfb5a1183ae5a5fe51f5d5a69088cc49635504d103d6b98f17ae7cb23a97c10db62840581a505ad23df06bf8a8a879002702b23bf8f4079ea8c30c2d0d9514db0ae6a99e32df1fdd3d6727735fab3a89e586f0558a4a619c2c0539c808024b73fbb73810758e3006fa37963d149bf6c9277e5c517ef7ad8aa603374ab714c2179bbfffbf2fbedb6525b5576bf61001f74f4be1f6c6c38a035da4dd97cca3aac8f385d0ccb241c32bdc971fc599e63100295bf7b1a3aa1ded9669f7ea197ae9e191dc967c1a9361337b493b4395ca8f9dc7582cbdc7c8838ec1dd376d916e896f3109170543399771a75b6f6be27fd1f820dbe8ae17a3be7c184c8dfc2687f0a1b91b96f029f3e10bdb33e02154fc2c587fa99315e0378cdd387d5b7470bcba1f146539fe9c79afc3aaef0c3ffe02b96cc5ff1e9ec3e3e0ac984f17fadb7d15210c8fe8505420b0b3fd60f1269f6d5530aa6f7356f62a7a860c6f238fd57b3329560d19e35443b1238e3eab2b2f5cd19c1ca6e01428c6784e985bc26f6698540f65987dc9cf616ad1f4ef15b5e0e4ce31bfa7c28567d7909aeb3300abb7fe2445cf1a03919532ff56cd47aaf98a6b82ee589cf4ac92c1c42902880242c77481f627b5ccb0c98067cc257e28e10ab76d32ab31bea16894a9f3b814ed755f18d4aabdfd2f6a53308b146e3aea30d8a89edd5d134355c90b62c5c0be711d1b669125c26e96c7f9e6fabd8d03102a3e2edd6be27be9731083e2c03b9e907a0a77f450fe76ecbe2e2e4ec033d4d921ae1544187805529bc5fa71090bcfd205785c364f3c8febb255000a6d9cb10408441b402f6c878a52f10113b271189d2ad2b4850e34862575fbcb5078f9533bd71276e1689b2203a0e4a02a81729fd841fe95e38fc4d619e433ba1809b1684329e3c258f63477ddcab14251458f73bb19469db62a68c2ee14dcd64afb918c06831b5f84665f4070b3e163e24bb40e644195811aba50294c72c4d350b5c0379917116b254bd1e70012548ddc155e947c512d9c76d743c684ef55621de7f248c1f01b920958233e3a6627c78fb79334caadefb62a83cf8a7e0d300a0064d6f236ff915f08a6830956a28801e9f3cc44da6ce1b2ce9d4a33918a1923c3945aecaf5b5fa6f67a7b2205854338e11f611dd46874ecfcc8e047e4fc7acb0181691ce3b47c10da907d5c94c3d2d513334f96cf7af05971a00462948e5960939149a36820163ae174257bd95619984841104da69db9459994c2ed95ecbc2525abf9b31581da5fda4d26611e6db65a6058285fb9bae4092773fb51eb7c96fec43a9fb0224bdf85df832f39d508a2667f8bc57c4bf3fef795490bc72884abf6ab811fabe8c7633037de916770e7ab1c3fd23fb0e68def066eb61be05d745ce2eba2dcdfb5a4bf2bb642efbb679f64ebfb0214ceb2c6df68028effa5a2352efe006e282820d8ab04d5297d9987c4f9c60e11e66f07509c78e8fa5b69abc9e0f1808f47f7aab5bd00f299217b9053e4b33d1857be7860239f1e24fd94ee646eaa86dd4bed6b14feb961791f1f337656d4929bab745292ed5b8a422018af6373be399e707ff3972c2084db4fb7d3951cf66837fa67054f7bc08cb223c648050c7e033dcfc3acb22c644595a256207a00d6f9225a5b545cb4ff0b648933506d89d7639ed8e06f782122b1596c82bb3d4b6a349d068b53ad68091d6b7296da632a03c60f0a5a202c951c0a6c5a0b31df1b55e10df24b3565ae4bd936f6a2ede1a1b082253acf6fade2819695d3d5971788e325418b79e233d9e85c9be206694f21bfd163e6aa8986c3b10d94bcff28058156ff15102d9ab4fdc1508bd8c19a4754064547b47fba",
					"descriptor": "0x010000"
				}`,
		},
	}
}

type testBackend struct {
	db      qrldb.Database
	chain   *core.BlockChain
	pending *types.Block
}

func newTestBackend(t *testing.T, n int, gspec *core.Genesis, engine consensus.Engine, generator func(i int, b *core.BlockGen)) *testBackend {
	var (
		cacheConfig = &core.CacheConfig{
			TrieCleanLimit:    256,
			TrieDirtyLimit:    256,
			TrieTimeLimit:     5 * time.Minute,
			SnapshotLimit:     0,
			TrieDirtyDisabled: true, // Archive mode
		}
	)
	// Generate blocks for testing
	db, blocks, _ := core.GenerateChainWithGenesis(gspec, engine, n, generator)
	txlookupLimit := uint64(0)
	chain, err := core.NewBlockChain(db, cacheConfig, gspec, engine, vm.Config{}, &txlookupLimit)
	if err != nil {
		t.Fatalf("failed to create tester chain: %v", err)
	}
	if n, err := chain.InsertChain(blocks); err != nil {
		t.Fatalf("block %d: failed to insert into chain: %v", n, err)
	}

	backend := &testBackend{db: db, chain: chain}
	return backend
}

func (b *testBackend) setPendingBlock(block *types.Block) {
	b.pending = block
}

func (b testBackend) SyncProgress() qrl.SyncProgress { return qrl.SyncProgress{} }
func (b testBackend) SuggestGasTipCap(ctx context.Context) (*big.Int, error) {
	return big.NewInt(0), nil
}
func (b testBackend) FeeHistory(ctx context.Context, blockCount uint64, lastBlock rpc.BlockNumber, rewardPercentiles []float64) (*big.Int, [][]*big.Int, []*big.Int, []float64, error) {
	return nil, nil, nil, nil, nil
}
func (b testBackend) ChainDb() qrldb.Database           { return b.db }
func (b testBackend) AccountManager() *accounts.Manager { return nil }
func (b testBackend) ExtRPCEnabled() bool               { return false }
func (b testBackend) RPCGasCap() uint64                 { return 10000000 }
func (b testBackend) RPCQRVMTimeout() time.Duration     { return time.Second }
func (b testBackend) RPCTxFeeCap() float64              { return 0 }
func (b testBackend) SetHead(number uint64)             {}
func (b testBackend) HeaderByNumber(ctx context.Context, number rpc.BlockNumber) (*types.Header, error) {
	if number == rpc.LatestBlockNumber {
		return b.chain.CurrentBlock(), nil
	}
	if number == rpc.PendingBlockNumber && b.pending != nil {
		return b.pending.Header(), nil
	}
	return b.chain.GetHeaderByNumber(uint64(number)), nil
}
func (b testBackend) HeaderByHash(ctx context.Context, hash common.Hash) (*types.Header, error) {
	return b.chain.GetHeaderByHash(hash), nil
}
func (b testBackend) HeaderByNumberOrHash(ctx context.Context, blockNrOrHash rpc.BlockNumberOrHash) (*types.Header, error) {
	if blockNr, ok := blockNrOrHash.Number(); ok {
		return b.HeaderByNumber(ctx, blockNr)
	}
	if blockHash, ok := blockNrOrHash.Hash(); ok {
		return b.HeaderByHash(ctx, blockHash)
	}
	panic("unknown type rpc.BlockNumberOrHash")
}
func (b testBackend) CurrentHeader() *types.Header { return b.chain.CurrentBlock() }
func (b testBackend) CurrentBlock() *types.Header  { return b.chain.CurrentBlock() }
func (b testBackend) BlockByNumber(ctx context.Context, number rpc.BlockNumber) (*types.Block, error) {
	if number == rpc.LatestBlockNumber {
		head := b.chain.CurrentBlock()
		return b.chain.GetBlock(head.Hash(), head.Number.Uint64()), nil
	}
	if number == rpc.PendingBlockNumber {
		return b.pending, nil
	}
	return b.chain.GetBlockByNumber(uint64(number)), nil
}
func (b testBackend) BlockByHash(ctx context.Context, hash common.Hash) (*types.Block, error) {
	return b.chain.GetBlockByHash(hash), nil
}
func (b testBackend) BlockByNumberOrHash(ctx context.Context, blockNrOrHash rpc.BlockNumberOrHash) (*types.Block, error) {
	if blockNr, ok := blockNrOrHash.Number(); ok {
		return b.BlockByNumber(ctx, blockNr)
	}
	if blockHash, ok := blockNrOrHash.Hash(); ok {
		return b.BlockByHash(ctx, blockHash)
	}
	panic("unknown type rpc.BlockNumberOrHash")
}
func (b testBackend) GetBody(ctx context.Context, hash common.Hash, number rpc.BlockNumber) (*types.Body, error) {
	return b.chain.GetBlock(hash, uint64(number.Int64())).Body(), nil
}
func (b testBackend) StateAndHeaderByNumber(ctx context.Context, number rpc.BlockNumber) (*state.StateDB, *types.Header, error) {
	if number == rpc.PendingBlockNumber {
		panic("pending state not implemented")
	}
	header, err := b.HeaderByNumber(ctx, number)
	if err != nil {
		return nil, nil, err
	}
	if header == nil {
		return nil, nil, errors.New("header not found")
	}
	stateDb, err := b.chain.StateAt(header.Root)
	return stateDb, header, err
}
func (b testBackend) StateAndHeaderByNumberOrHash(ctx context.Context, blockNrOrHash rpc.BlockNumberOrHash) (*state.StateDB, *types.Header, error) {
	if blockNr, ok := blockNrOrHash.Number(); ok {
		return b.StateAndHeaderByNumber(ctx, blockNr)
	}
	panic("only implemented for number")
}
func (b testBackend) Pending() (*types.Block, types.Receipts, *state.StateDB) { panic("implement me") }
func (b testBackend) GetReceipts(ctx context.Context, hash common.Hash) (types.Receipts, error) {
	header, err := b.HeaderByHash(ctx, hash)
	if header == nil || err != nil {
		return nil, err
	}
	receipts := rawdb.ReadReceipts(b.db, hash, header.Number.Uint64(), header.Time, b.chain.Config())
	return receipts, nil
}

func (b testBackend) GetQRVM(ctx context.Context, msg *core.Message, state *state.StateDB, header *types.Header, vmConfig *vm.Config, blockContext *vm.BlockContext) *vm.QRVM {
	if vmConfig == nil {
		vmConfig = b.chain.GetVMConfig()
	}
	txContext := core.NewQRVMTxContext(msg)
	context := core.NewQRVMBlockContext(header, b.chain, nil)
	if blockContext != nil {
		context = *blockContext
	}
	return vm.NewQRVM(context, txContext, state, b.chain.Config(), *vmConfig)
}
func (b testBackend) SubscribeChainEvent(ch chan<- core.ChainEvent) event.Subscription {
	panic("implement me")
}
func (b testBackend) SubscribeChainHeadEvent(ch chan<- core.ChainHeadEvent) event.Subscription {
	panic("implement me")
}
func (b testBackend) SubscribeChainSideEvent(ch chan<- core.ChainSideEvent) event.Subscription {
	panic("implement me")
}
func (b testBackend) SendTx(ctx context.Context, signedTx *types.Transaction) error {
	panic("implement me")
}
func (b testBackend) GetTransaction(ctx context.Context, txHash common.Hash) (*types.Transaction, common.Hash, uint64, uint64, error) {
	tx, blockHash, blockNumber, index := rawdb.ReadTransaction(b.db, txHash)
	return tx, blockHash, blockNumber, index, nil
}
func (b testBackend) GetPoolTransactions() (types.Transactions, error)         { panic("implement me") }
func (b testBackend) GetPoolTransaction(txHash common.Hash) *types.Transaction { panic("implement me") }
func (b testBackend) GetPoolNonce(ctx context.Context, addr common.Address) (uint64, error) {
	panic("implement me")
}
func (b testBackend) Stats() (pending int, queued int) { panic("implement me") }
func (b testBackend) TxPoolContent() (map[common.Address][]*types.Transaction, map[common.Address][]*types.Transaction) {
	panic("implement me")
}
func (b testBackend) TxPoolContentFrom(addr common.Address) ([]*types.Transaction, []*types.Transaction) {
	panic("implement me")
}
func (b testBackend) SubscribeNewTxsEvent(events chan<- core.NewTxsEvent) event.Subscription {
	panic("implement me")
}
func (b testBackend) ChainConfig() *params.ChainConfig { return b.chain.Config() }
func (b testBackend) Engine() consensus.Engine         { return b.chain.Engine() }
func (b testBackend) GetLogs(ctx context.Context, blockHash common.Hash, number uint64) ([][]*types.Log, error) {
	panic("implement me")
}
func (b testBackend) SubscribeRemovedLogsEvent(ch chan<- core.RemovedLogsEvent) event.Subscription {
	panic("implement me")
}
func (b testBackend) SubscribeLogsEvent(ch chan<- []*types.Log) event.Subscription {
	panic("implement me")
}
func (b testBackend) BloomStatus() (uint64, uint64) { panic("implement me") }
func (b testBackend) ServiceFilter(ctx context.Context, session *bloombits.MatcherSession) {
	panic("implement me")
}

func TestEstimateGas(t *testing.T) {
	t.Parallel()
	// Initialize test accounts
	var (
		accounts = newAccounts(2)
		genesis  = &core.Genesis{
			Config: params.TestChainConfig,
			Alloc: core.GenesisAlloc{
				accounts[0].addr: {Balance: big.NewInt(params.Quanta)},
				accounts[1].addr: {Balance: big.NewInt(params.Quanta)},
			},
		}
		genBlocks      = 10
		signer         = types.ShanghaiSigner{ChainId: big.NewInt(1)}
		randomAccounts = newAccounts(2)
	)
	api := NewBlockChainAPI(newTestBackend(t, genBlocks, genesis, beacon.NewFaker(), func(i int, b *core.BlockGen) {
		// Transfer from account[0] to account[1]
		//    value: 1000 planck
		//    fee:   0 planck
		tx, _ := types.SignTx(types.NewTx(&types.DynamicFeeTx{Nonce: uint64(i), To: &accounts[1].addr, Value: big.NewInt(1000), Gas: params.TxGas, GasFeeCap: b.BaseFee(), Data: nil}), signer, accounts[0].key)
		b.AddTx(tx)
	}))
	var testSuite = []struct {
		blockNumber rpc.BlockNumber
		call        TransactionArgs
		overrides   StateOverride
		expectErr   error
		want        uint64
	}{
		// simple transfer on latest block
		{
			blockNumber: rpc.LatestBlockNumber,
			call: TransactionArgs{
				From:  &accounts[0].addr,
				To:    &accounts[1].addr,
				Value: (*hexutil.Big)(big.NewInt(1000)),
			},
			expectErr: nil,
			want:      21000,
		},
		// simple transfer with insufficient funds on latest block
		{
			blockNumber: rpc.LatestBlockNumber,
			call: TransactionArgs{
				From:  &randomAccounts[0].addr,
				To:    &accounts[1].addr,
				Value: (*hexutil.Big)(big.NewInt(1000)),
			},
			expectErr: core.ErrInsufficientFunds,
			want:      21000,
		},
		// empty create
		{
			blockNumber: rpc.LatestBlockNumber,
			call:        TransactionArgs{},
			expectErr:   nil,
			want:        53000,
		},
		{
			blockNumber: rpc.LatestBlockNumber,
			call:        TransactionArgs{},
			overrides: StateOverride{
				randomAccounts[0].addr: OverrideAccount{Balance: newRPCBalance(new(big.Int).Mul(big.NewInt(1), big.NewInt(params.Quanta)))},
			},
			expectErr: nil,
			want:      53000,
		},
		{
			blockNumber: rpc.LatestBlockNumber,
			call: TransactionArgs{
				From:  &randomAccounts[0].addr,
				To:    &randomAccounts[1].addr,
				Value: (*hexutil.Big)(big.NewInt(1000)),
			},
			overrides: StateOverride{
				randomAccounts[0].addr: OverrideAccount{Balance: newRPCBalance(big.NewInt(0))},
			},
			expectErr: core.ErrInsufficientFunds,
		},
	}
	for i, tc := range testSuite {
		result, err := api.EstimateGas(context.Background(), tc.call, &rpc.BlockNumberOrHash{BlockNumber: &tc.blockNumber}, &tc.overrides)
		if tc.expectErr != nil {
			if err == nil {
				t.Errorf("test %d: want error %v, have nothing", i, tc.expectErr)
				continue
			}
			if !errors.Is(err, tc.expectErr) {
				t.Errorf("test %d: error mismatch, want %v, have %v", i, tc.expectErr, err)
			}
			continue
		}
		if err != nil {
			t.Errorf("test %d: want no error, have %v", i, err)
			continue
		}
		if uint64(result) != tc.want {
			t.Errorf("test %d, result mismatch, have\n%v\n, want\n%v\n", i, uint64(result), tc.want)
		}
	}
}

func TestCall(t *testing.T) {
	t.Parallel()
	// Initialize test accounts
	var (
		accounts = newAccounts(3)
		genesis  = &core.Genesis{
			Config: params.TestChainConfig,
			Alloc: core.GenesisAlloc{
				accounts[0].addr: {Balance: big.NewInt(params.Quanta)},
				accounts[1].addr: {Balance: big.NewInt(params.Quanta)},
				accounts[2].addr: {Balance: big.NewInt(params.Quanta)},
			},
		}
		genBlocks = 10
		signer    = types.ShanghaiSigner{ChainId: big.NewInt(1)}
	)
	api := NewBlockChainAPI(newTestBackend(t, genBlocks, genesis, beacon.NewFaker(), func(i int, b *core.BlockGen) {
		// Transfer from account[0] to account[1]
		//    value: 1000 planck
		//    fee:   0 planck
		tx, _ := types.SignTx(types.NewTx(&types.DynamicFeeTx{Nonce: uint64(i), To: &accounts[1].addr, Value: big.NewInt(1000), Gas: params.TxGas, GasFeeCap: b.BaseFee(), Data: nil}), signer, accounts[0].key)
		b.AddTx(tx)
	}))
	randomAccounts := newAccounts(3)
	var testSuite = []struct {
		blockNumber    rpc.BlockNumber
		overrides      StateOverride
		call           TransactionArgs
		blockOverrides BlockOverrides
		expectErr      error
		want           string
	}{
		// transfer on genesis
		{
			blockNumber: rpc.BlockNumber(0),
			call: TransactionArgs{
				From:  &accounts[0].addr,
				To:    &accounts[1].addr,
				Value: (*hexutil.Big)(big.NewInt(1000)),
			},
			expectErr: nil,
			want:      "0x",
		},
		// transfer on the head
		{
			blockNumber: rpc.BlockNumber(genBlocks),
			call: TransactionArgs{
				From:  &accounts[0].addr,
				To:    &accounts[1].addr,
				Value: (*hexutil.Big)(big.NewInt(1000)),
			},
			expectErr: nil,
			want:      "0x",
		},
		// transfer on a non-existent block, error expects
		{
			blockNumber: rpc.BlockNumber(genBlocks + 1),
			call: TransactionArgs{
				From:  &accounts[0].addr,
				To:    &accounts[1].addr,
				Value: (*hexutil.Big)(big.NewInt(1000)),
			},
			expectErr: errors.New("header not found"),
		},
		// transfer on the latest block
		{
			blockNumber: rpc.LatestBlockNumber,
			call: TransactionArgs{
				From:  &accounts[0].addr,
				To:    &accounts[1].addr,
				Value: (*hexutil.Big)(big.NewInt(1000)),
			},
			expectErr: nil,
			want:      "0x",
		},
		// Call which can only succeed if state is state overridden
		{
			blockNumber: rpc.LatestBlockNumber,
			call: TransactionArgs{
				From:  &randomAccounts[0].addr,
				To:    &randomAccounts[1].addr,
				Value: (*hexutil.Big)(big.NewInt(1000)),
			},
			overrides: StateOverride{
				randomAccounts[0].addr: OverrideAccount{Balance: newRPCBalance(new(big.Int).Mul(big.NewInt(1), big.NewInt(params.Quanta)))},
			},
			want: "0x",
		},
		// Invalid call without state overriding
		{
			blockNumber: rpc.LatestBlockNumber,
			call: TransactionArgs{
				From:  &randomAccounts[0].addr,
				To:    &randomAccounts[1].addr,
				Value: (*hexutil.Big)(big.NewInt(1000)),
			},
			expectErr: core.ErrInsufficientFunds,
		},
		// Successful simple contract call
		//
		// // SPDX-License-Identifier: GPL-3.0
		// // TODO(now.youtrack.cloud/issue/TGZ-30)
		//  pragma hyperion >=0.7.0 <0.8.0;
		//
		//  /**
		//   * @title Storage
		//   * @dev Store & retrieve value in a variable
		//   */
		//  contract Storage {
		//      uint256 public number;
		//      constructor() {
		//          number = block.number;
		//      }
		//  }
		{
			blockNumber: rpc.LatestBlockNumber,
			call: TransactionArgs{
				From: &randomAccounts[0].addr,
				To:   &randomAccounts[2].addr,
				Data: hex2Bytes("8381f58a"), // call number()
			},
			overrides: StateOverride{
				randomAccounts[2].addr: OverrideAccount{
					Code:      hex2Bytes("6080604052348015600f57600080fd5b506004361060285760003560e01c80638381f58a14602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea2646970667358221220eab35ffa6ab2adfe380772a48b8ba78e82a1b820a18fcb6f59aa4efb20a5f60064736f6c63430007040033"),
					StateDiff: &map[common.Hash]common.Hash{{}: common.BigToHash(big.NewInt(123))},
				},
			},
			want: "0x000000000000000000000000000000000000000000000000000000000000007b",
		},
		// Block overrides should work
		{
			blockNumber: rpc.LatestBlockNumber,
			call: TransactionArgs{
				From: &accounts[1].addr,
				Input: &hexutil.Bytes{
					0x43,             // NUMBER
					0x60, 0x00, 0x52, // MSTORE offset 0
					0x60, 0x20, 0x60, 0x00, 0xf3,
				},
			},
			blockOverrides: BlockOverrides{Number: (*hexutil.Big)(big.NewInt(11))},
			want:           "0x000000000000000000000000000000000000000000000000000000000000000b",
		},
	}
	for i, tc := range testSuite {
		result, err := api.Call(context.Background(), tc.call, rpc.BlockNumberOrHash{BlockNumber: &tc.blockNumber}, &tc.overrides, &tc.blockOverrides)
		if tc.expectErr != nil {
			if err == nil {
				t.Errorf("test %d: want error %v, have nothing", i, tc.expectErr)
				continue
			}
			if !errors.Is(err, tc.expectErr) {
				// Second try
				if !reflect.DeepEqual(err, tc.expectErr) {
					t.Errorf("test %d: error mismatch, want %v, have %v", i, tc.expectErr, err)
				}
			}
			continue
		}
		if err != nil {
			t.Errorf("test %d: want no error, have %v", i, err)
			continue
		}
		if !reflect.DeepEqual(result.String(), tc.want) {
			t.Errorf("test %d, result mismatch, have\n%v\n, want\n%v\n", i, result.String(), tc.want)
		}
	}
}

type Account struct {
	key  *walletmldsa87.Wallet
	addr common.Address
}

func newAccounts(n int) (accounts []Account) {
	for i := 0; i < n; i++ {
		key, _ := crypto.GenerateMLDSA87Key()
		addr := key.GetAddress()
		accounts = append(accounts, Account{key: key, addr: addr})
	}
	slices.SortFunc(accounts, func(a, b Account) int { return a.addr.Cmp(b.addr) })
	return accounts
}

func newRPCBalance(balance *big.Int) **hexutil.Big {
	rpcBalance := (*hexutil.Big)(balance)
	return &rpcBalance
}

func hex2Bytes(str string) *hexutil.Bytes {
	rpcBytes := hexutil.Bytes(common.Hex2Bytes(str))
	return &rpcBytes
}

func TestRPCMarshalBlock(t *testing.T) {
	t.Parallel()
	var (
		txs []*types.Transaction
		to  = common.BytesToAddress([]byte{0x11})
	)
	for i := uint64(1); i <= 4; i++ {
		var tx *types.Transaction
		if i%2 == 0 {
			tx = types.NewTx(&types.DynamicFeeTx{
				Nonce:     i,
				GasFeeCap: big.NewInt(11111),
				Gas:       1111,
				To:        &to,
				Value:     big.NewInt(111),
				Data:      []byte{0x11, 0x11, 0x11},
			})
		} else {
			tx = types.NewTx(&types.DynamicFeeTx{
				ChainID:   big.NewInt(1337),
				Nonce:     i,
				GasFeeCap: big.NewInt(11111),
				Gas:       1111,
				To:        &to,
				Value:     big.NewInt(111),
				Data:      []byte{0x11, 0x11, 0x11},
			})
		}
		txs = append(txs, tx)
	}
	block := types.NewBlock(&types.Header{Number: big.NewInt(100)}, &types.Body{Transactions: txs}, nil, blocktest.NewHasher())

	var testSuite = []struct {
		inclTx bool
		fullTx bool
		want   string
	}{
		// without txs
		{
			inclTx: false,
			fullTx: false,
			want: `{
					"extraData": "0x",
					"gasLimit": "0x0",
					"gasUsed": "0x0",
					"hash": "0x8788f6528b898f38184a4706f7b030e958847229c8250e4cd15b71c25e71ae26",
					"logsBloom": "0x
					"miner": "Q0000000000000000000000000000000000000000",
					"number": "0x64",
					"parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
					"prevRandao": "0x0000000000000000000000000000000000000000000000000000000000000000",
					"receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
					"size": "0x736f",
					"stateRoot": "0x0000000000000000000000000000000000000000000000000000000000000000",
					"timestamp": "0x0",
					"transactionsRoot": "0x5d8b0a744c28c706cbd0c506077b6dfac70c7f5dde72d925a27ffc8ddf4c9ce9"
				}`,
		},

		// only tx hashes
		{
			inclTx: true,
			fullTx: false,
			want: `{
					"extraData": "0x",
					"gasLimit": "0x0",
					"gasUsed": "0x0",
					"hash": "0x8788f6528b898f38184a4706f7b030e958847229c8250e4cd15b71c25e71ae26",
					"logsBloom": "0x
					"miner": "Q0000000000000000000000000000000000000000",
					"number": "0x64",
					"parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
					"prevRandao": "0x0000000000000000000000000000000000000000000000000000000000000000",
					"receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
					"size": "0x736f",
					"stateRoot": "0x0000000000000000000000000000000000000000000000000000000000000000",
					"timestamp": "0x0",
					"transactions": [
						"0x8539ae615d5568a7c8d2ea4966ddba15895c37f29e83188b9ec577490768d9b6",
						"0xad6497b10335f8599f76d0dd81131beac4ea33d3aee72d53ea870eb6e44b11d6",
						"0x068c72215eb3c2c84fedc06c6323955034dae9d8b7d979ac856756c01f47c142",
						"0x3620a979346eda526a4cb8f9378034bedee1434177005183e482c54e3dacd8fe"
					],
					"transactionsRoot": "0x5d8b0a744c28c706cbd0c506077b6dfac70c7f5dde72d925a27ffc8ddf4c9ce9"
				}`,
		},
		// full tx details
		{
			inclTx: true,
			fullTx: true,
			want: `{
					"extraData": "0x",
					"gasLimit": "0x0",
					"gasUsed": "0x0",
					"hash": "0x8788f6528b898f38184a4706f7b030e958847229c8250e4cd15b71c25e71ae26",
					"logsBloom": "0x
					"miner": "Q0000000000000000000000000000000000000000",
					"number": "0x64",
					"parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
					"prevRandao": "0x0000000000000000000000000000000000000000000000000000000000000000",
					"receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
					"size": "0x736f",
					"stateRoot": "0x0000000000000000000000000000000000000000000000000000000000000000",
					"timestamp": "0x0",
					"transactions": [
						{
							"blockHash": "0x8788f6528b898f38184a4706f7b030e958847229c8250e4cd15b71c25e71ae26",
							"blockNumber": "0x64",
							"from": "Q0000000000000000000000000000000000000000",
							"gas": "0x457",
							"gasPrice": "0x2b67",
							"maxFeePerGas": "0x2b67",
							"maxPriorityFeePerGas": "0x0",
							"hash": "0x8539ae615d5568a7c8d2ea4966ddba15895c37f29e83188b9ec577490768d9b6",
							"input": "0x111111",
							"nonce": "0x1",
							"to": "Q0000000000000000000000000000000000000011",
							"transactionIndex": "0x0",
							"value": "0x6f",
							"type": "0x2",
							"accessList": [],
							"chainId": "0x539",
							"publicKey": "0x
							"signature": "0x
							"descriptor": "0x000000"
						},
						{
							"accessList": [],
							"blockHash": "0x8788f6528b898f38184a4706f7b030e958847229c8250e4cd15b71c25e71ae26",
							"blockNumber": "0x64",
							"from": "Q0000000000000000000000000000000000000000",
							"gas": "0x457",
							"gasPrice": "0x2b67",
							"hash": "0xad6497b10335f8599f76d0dd81131beac4ea33d3aee72d53ea870eb6e44b11d6",
							"input": "0x111111",
							"maxFeePerGas": "0x2b67",
							"maxPriorityFeePerGas": "0x0",
							"nonce": "0x2",
							"to": "Q0000000000000000000000000000000000000011",
							"transactionIndex": "0x1",
							"value": "0x6f",
							"type": "0x2",
							"chainId": "0x0",
							"publicKey": "0x
							"signature": "
							"descriptor": "0x000000"
						},
						{
							"blockHash": "0x8788f6528b898f38184a4706f7b030e958847229c8250e4cd15b71c25e71ae26",
							"blockNumber": "0x64",
							"from": "Q0000000000000000000000000000000000000000",
							"gas": "0x457",
							"gasPrice": "0x2b67",
							"maxFeePerGas": "0x2b67",
							"maxPriorityFeePerGas": "0x0",
							"hash": "0x068c72215eb3c2c84fedc06c6323955034dae9d8b7d979ac856756c01f47c142",
							"input": "0x111111",
							"nonce": "0x3",
							"to": "Q0000000000000000000000000000000000000011",
							"transactionIndex": "0x2",
							"value": "0x6f",
							"type": "0x2",
							"accessList": [],
							"chainId": "0x539",
							"publicKey": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
							"signature": "
							"descriptor": "0x000000"
						},
						{
							"accessList": [],
							"blockHash": "0x8788f6528b898f38184a4706f7b030e958847229c8250e4cd15b71c25e71ae26",
							"blockNumber": "0x64",
							"from": "Q0000000000000000000000000000000000000000",
							"gas": "0x457",
							"gasPrice": "0x2b67",
							"hash": "0x3620a979346eda526a4cb8f9378034bedee1434177005183e482c54e3dacd8fe",
							"input": "0x111111",
							"maxFeePerGas": "0x2b67",
							"maxPriorityFeePerGas": "0x0",
							"nonce": "0x4",
							"to": "Q0000000000000000000000000000000000000011",
							"transactionIndex": "0x3",
							"value": "0x6f",
							"type": "0x2",
							"chainId": "0x0",
							"publicKey": "0x
							"signature": "0x
							"descriptor": "0x000000"
						}
					],
					"transactionsRoot": "0x5d8b0a744c28c706cbd0c506077b6dfac70c7f5dde72d925a27ffc8ddf4c9ce9"
				}`,
		},
	}

	for i, tc := range testSuite {
		resp := RPCMarshalBlock(block, tc.inclTx, tc.fullTx, params.MainnetChainConfig)
		out, err := json.Marshal(resp)
		if err != nil {
			t.Errorf("test %d: json marshal error: %v", i, err)
			continue
		}
		require.JSONEqf(t, tc.want, string(out), "test %d", i)
	}
}

func TestRPCGetBlockOrHeader(t *testing.T) {
	t.Parallel()

	// Initialize test accounts
	var (
		acc1Key, _                = pqcrypto.HexToWallet("8a1f9a8f95be41cd7ccb6168179afb4504aefe388d1e14474d32c45c72ce7b7a")
		acc2Key, _                = pqcrypto.HexToWallet("49a7b37aa6f6645917e7b807e9d1c00d4fa71f18343b0d4122a4d2df64dd6fee")
		acc1Addr                  = acc1Key.GetAddress()
		acc2Addr   common.Address = acc2Key.GetAddress()
		genesis                   = &core.Genesis{
			Config: params.TestChainConfig,
			Alloc: core.GenesisAlloc{
				acc1Addr: {Balance: big.NewInt(params.Quanta)},
				acc2Addr: {Balance: big.NewInt(params.Quanta)},
			},
		}
		genBlocks = 10
		signer    = types.ShanghaiSigner{ChainId: big.NewInt(1)}
		tx        = types.NewTx(&types.DynamicFeeTx{
			Nonce:     11,
			GasFeeCap: big.NewInt(11111),
			Gas:       1111,
			To:        &acc2Addr,
			Value:     big.NewInt(111),
			Data:      []byte{0x11, 0x11, 0x11},
		})
		withdrawal = &types.Withdrawal{
			Index:     0,
			Validator: 1,
			Address:   common.Address{0x12, 0x34},
			Amount:    10,
		}
		pending = types.NewBlock(&types.Header{Number: big.NewInt(11), Time: 42}, &types.Body{Transactions: types.Transactions{tx}, Withdrawals: types.Withdrawals{withdrawal}}, nil, blocktest.NewHasher())
	)
	backend := newTestBackend(t, genBlocks, genesis, beacon.NewFaker(), func(i int, b *core.BlockGen) {
		// Transfer from account[0] to account[1]
		//    value: 1000 planck
		//    fee:   0 planck
		tx, _ := types.SignTx(types.NewTx(&types.DynamicFeeTx{Nonce: uint64(i), To: &acc2Addr, Value: big.NewInt(1000), Gas: params.TxGas, GasFeeCap: b.BaseFee(), Data: nil}), signer, acc1Key)
		b.AddTx(tx)
	})
	backend.setPendingBlock(pending)
	api := NewBlockChainAPI(backend)
	blockHashes := make([]common.Hash, genBlocks+1)
	ctx := context.Background()
	for i := 0; i <= genBlocks; i++ {
		header, err := backend.HeaderByNumber(ctx, rpc.BlockNumber(i))
		if err != nil {
			t.Errorf("failed to get block: %d err: %v", i, err)
		}
		blockHashes[i] = header.Hash()
	}
	pendingHash := pending.Hash()

	var testSuite = []struct {
		blockNumber rpc.BlockNumber
		blockHash   *common.Hash
		fullTx      bool
		reqHeader   bool
		file        string
		expectErr   error
	}{
		// 0. latest header
		{
			blockNumber: rpc.LatestBlockNumber,
			reqHeader:   true,
			file:        "tag-latest",
		},
		// 1. genesis header
		{
			blockNumber: rpc.BlockNumber(0),
			reqHeader:   true,
			file:        "number-0",
		},
		// 2. #1 header
		{
			blockNumber: rpc.BlockNumber(1),
			reqHeader:   true,
			file:        "number-1",
		},
		// 3. latest-1 header
		{
			blockNumber: rpc.BlockNumber(9),
			reqHeader:   true,
			file:        "number-latest-1",
		},
		// 4. latest+1 header
		{
			blockNumber: rpc.BlockNumber(11),
			reqHeader:   true,
			file:        "number-latest+1",
		},
		// 5. pending header
		{
			blockNumber: rpc.PendingBlockNumber,
			reqHeader:   true,
			file:        "tag-pending",
		},
		// 6. latest block
		{
			blockNumber: rpc.LatestBlockNumber,
			file:        "tag-latest",
		},
		// 7. genesis block
		{
			blockNumber: rpc.BlockNumber(0),
			file:        "number-0",
		},
		// 8. #1 block
		{
			blockNumber: rpc.BlockNumber(1),
			file:        "number-1",
		},
		// 9. latest-1 block
		{
			blockNumber: rpc.BlockNumber(9),
			fullTx:      true,
			file:        "number-latest-1",
		},
		// 10. latest+1 block
		{
			blockNumber: rpc.BlockNumber(11),
			fullTx:      true,
			file:        "number-latest+1",
		},
		// 11. pending block
		{
			blockNumber: rpc.PendingBlockNumber,
			file:        "tag-pending",
		},
		// 12. pending block + fullTx
		{
			blockNumber: rpc.PendingBlockNumber,
			fullTx:      true,
			file:        "tag-pending-fullTx",
		},
		// 13. latest header by hash
		{
			blockHash: &blockHashes[len(blockHashes)-1],
			reqHeader: true,
			file:      "hash-latest",
		},
		// 14. genesis header by hash
		{
			blockHash: &blockHashes[0],
			reqHeader: true,
			file:      "hash-0",
		},
		// 15. #1 header
		{
			blockHash: &blockHashes[1],
			reqHeader: true,
			file:      "hash-1",
		},
		// 16. latest-1 header
		{
			blockHash: &blockHashes[len(blockHashes)-2],
			reqHeader: true,
			file:      "hash-latest-1",
		},
		// 17. empty hash
		{
			blockHash: &common.Hash{},
			reqHeader: true,
			file:      "hash-empty",
		},
		// 18. pending hash
		{
			blockHash: &pendingHash,
			reqHeader: true,
			file:      `hash-pending`,
		},
		// 19. latest block
		{
			blockHash: &blockHashes[len(blockHashes)-1],
			file:      "hash-latest",
		},
		// 20. genesis block
		{
			blockHash: &blockHashes[0],
			file:      "hash-genesis",
		},
		// 21. #1 block
		{
			blockHash: &blockHashes[1],
			file:      "hash-1",
		},
		// 22. latest-1 block
		{
			blockHash: &blockHashes[len(blockHashes)-2],
			fullTx:    true,
			file:      "hash-latest-1-fullTx",
		},
		// 23. empty hash + body
		{
			blockHash: &common.Hash{},
			fullTx:    true,
			file:      "hash-empty-fullTx",
		},
		// 24. pending block
		{
			blockHash: &pendingHash,
			file:      `hash-pending`,
		},
		// 25. pending block + fullTx
		{
			blockHash: &pendingHash,
			fullTx:    true,
			file:      "hash-pending-fullTx",
		},
	}

	for i, tt := range testSuite {
		var (
			result map[string]interface{}
			err    error
			rpc    string
		)
		if tt.blockHash != nil {
			if tt.reqHeader {
				result = api.GetHeaderByHash(context.Background(), *tt.blockHash)
				rpc = "qrl_getHeaderByHash"
			} else {
				result, err = api.GetBlockByHash(context.Background(), *tt.blockHash, tt.fullTx)
				rpc = "qrl_getBlockByHash"
			}
		} else {
			if tt.reqHeader {
				result, err = api.GetHeaderByNumber(context.Background(), tt.blockNumber)
				rpc = "qrl_getHeaderByNumber"
			} else {
				result, err = api.GetBlockByNumber(context.Background(), tt.blockNumber, tt.fullTx)
				rpc = "qrl_getBlockByNumber"
			}
		}
		if tt.expectErr != nil {
			if err == nil {
				t.Errorf("test %d: want error %v, have nothing", i, tt.expectErr)
				continue
			}
			if !errors.Is(err, tt.expectErr) {
				t.Errorf("test %d: error mismatch, want %v, have %v", i, tt.expectErr, err)
			}
			continue
		}
		if err != nil {
			t.Errorf("test %d: want no error, have %v", i, err)
			continue
		}

		testRPCResponseWithFile(t, i, result, rpc, tt.file)
	}
}

func setupReceiptBackend(t *testing.T, genBlocks int) (*testBackend, []common.Hash) {
	config := *params.TestChainConfig
	var (
		acc1Key, _                 = pqcrypto.HexToWallet("8a1f9a8f95be41cd7ccb6168179afb4504aefe388d1e14474d32c45c72ce7b7a")
		acc2Key, _                 = pqcrypto.HexToWallet("49a7b37aa6f6645917e7b807e9d1c00d4fa71f18343b0d4122a4d2df64dd6fee")
		acc1Addr                   = acc1Key.GetAddress()
		acc2Addr    common.Address = acc2Key.GetAddress()
		contract, _                = common.NewAddressFromString("Q0000000000000000000000000000000000031ec7")
		genesis                    = &core.Genesis{
			Config: &config,
			Alloc: core.GenesisAlloc{
				acc1Addr: {Balance: big.NewInt(params.Quanta)},
				acc2Addr: {Balance: big.NewInt(params.Quanta)},
				// // SPDX-License-Identifier: GPL-3.0
				// // TODO(now.youtrack.cloud/issue/TGZ-30)
				// pragma hyperion >=0.7.0 <0.9.0;
				//
				// contract Token {
				//     event Transfer(address indexed from, address indexed to, uint256 value);
				//     function transfer(address to, uint256 value) public returns (bool) {
				//         emit Transfer(msg.sender, to, value);
				//         return true;
				//     }
				// }
				contract: {Balance: big.NewInt(params.Quanta), Code: common.FromHex("0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a9059cbb14610030575b600080fd5b61004a6004803603810190610045919061016a565b610060565b60405161005791906101c5565b60405180910390f35b60008273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516100bf91906101ef565b60405180910390a36001905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610101826100d6565b9050919050565b610111816100f6565b811461011c57600080fd5b50565b60008135905061012e81610108565b92915050565b6000819050919050565b61014781610134565b811461015257600080fd5b50565b6000813590506101648161013e565b92915050565b60008060408385031215610181576101806100d1565b5b600061018f8582860161011f565b92505060206101a085828601610155565b9150509250929050565b60008115159050919050565b6101bf816101aa565b82525050565b60006020820190506101da60008301846101b6565b92915050565b6101e981610134565b82525050565b600060208201905061020460008301846101e0565b9291505056fea2646970667358221220b469033f4b77b9565ee84e0a2f04d496b18160d26034d54f9487e57788fd36d564736f6c63430008120033")},
			},
		}
		signer   = types.LatestSignerForChainID(params.TestChainConfig.ChainID)
		txHashes = make([]common.Hash, genBlocks)
	)

	backend := newTestBackend(t, genBlocks, genesis, beacon.New(), func(i int, b *core.BlockGen) {
		var (
			tx  *types.Transaction
			err error
		)
		switch i {
		case 0:
			// transfer 1000planck
			tx, err = types.SignTx(types.NewTx(&types.DynamicFeeTx{Nonce: uint64(i), To: &acc2Addr, Value: big.NewInt(1000), Gas: params.TxGas, GasFeeCap: b.BaseFee(), Data: nil}), types.ShanghaiSigner{ChainId: big.NewInt(1)}, acc1Key)
		case 1:
			// create contract
			tx, err = types.SignTx(types.NewTx(&types.DynamicFeeTx{Nonce: uint64(i), To: nil, Gas: 53100, GasFeeCap: b.BaseFee(), Data: common.FromHex("0x60806040")}), signer, acc1Key)
		case 2:
			// with logs
			// transfer(address to, uint256 value)
			data := fmt.Sprintf("0xa9059cbb%s%s", common.HexToHash(common.BigToHash(big.NewInt(int64(i + 1))).Hex()).String()[2:], common.BytesToHash([]byte{byte(i + 11)}).String()[2:])
			tx, err = types.SignTx(types.NewTx(&types.DynamicFeeTx{Nonce: uint64(i), To: &contract, Gas: 60000, GasFeeCap: b.BaseFee(), Data: common.FromHex(data)}), signer, acc1Key)
		case 3:
			// dynamic fee with logs
			// transfer(address to, uint256 value)
			data := fmt.Sprintf("0xa9059cbb%s%s", common.HexToHash(common.BigToHash(big.NewInt(int64(i + 1))).Hex()).String()[2:], common.BytesToHash([]byte{byte(i + 11)}).String()[2:])
			fee := big.NewInt(500)
			fee.Add(fee, b.BaseFee())
			tx, err = types.SignTx(types.NewTx(&types.DynamicFeeTx{Nonce: uint64(i), To: &contract, Gas: 60000, Value: big.NewInt(1), GasTipCap: big.NewInt(500), GasFeeCap: fee, Data: common.FromHex(data)}), signer, acc1Key)
		case 4:
			// access list with contract create
			accessList := types.AccessList{{
				Address:     contract,
				StorageKeys: []common.Hash{{0}},
			}}
			tx, err = types.SignTx(types.NewTx(&types.DynamicFeeTx{Nonce: uint64(i), To: nil, Gas: 58100, GasFeeCap: b.BaseFee(), Data: common.FromHex("0x60806040"), AccessList: accessList}), signer, acc1Key)
		case 5:
			// dynamic fee tx
			fee := big.NewInt(500)
			fee.Add(fee, b.BaseFee())
			tx, err = types.SignTx(types.NewTx(&types.DynamicFeeTx{
				Nonce:     uint64(i),
				GasTipCap: big.NewInt(1),
				GasFeeCap: fee,
				Gas:       params.TxGas,
				To:        &acc2Addr,
				Value:     big.NewInt(0),
			}), signer, acc1Key)
		}
		if err != nil {
			t.Errorf("failed to sign tx: %v", err)
		}
		if tx != nil {
			b.AddTx(tx)
			txHashes[i] = tx.Hash()
		}
	})
	return backend, txHashes
}

func TestRPCGetTransactionReceipt(t *testing.T) {
	t.Parallel()

	var (
		backend, txHashes = setupReceiptBackend(t, 6)
		api               = NewTransactionAPI(backend, new(AddrLocker))
	)

	var testSuite = []struct {
		txHash common.Hash
		file   string
	}{
		// 0. normal success
		{
			txHash: txHashes[0],
			file:   "normal-transfer-tx",
		},
		// 1. create contract
		{
			txHash: txHashes[1],
			file:   "create-contract-tx",
		},
		// 2. with logs success
		{
			txHash: txHashes[2],
			file:   "with-logs",
		},
		// 3. dynamic tx with logs success
		{
			txHash: txHashes[3],
			file:   `dynamic-tx-with-logs`,
		},
		// 4. access list tx with create contract
		{
			txHash: txHashes[4],
			file:   "create-contract-with-access-list",
		},
		// 5. txhash empty
		{
			txHash: common.Hash{},
			file:   "txhash-empty",
		},
		// 6. txhash not found
		{
			txHash: common.HexToHash("deadbeef"),
			file:   "txhash-notfound",
		},
	}

	for i, tt := range testSuite {
		var (
			result interface{}
			err    error
		)
		result, err = api.GetTransactionReceipt(context.Background(), tt.txHash)
		if err != nil {
			t.Errorf("test %d: want no error, have %v", i, err)
			continue
		}
		testRPCResponseWithFile(t, i, result, "qrl_getTransactionReceipt", tt.file)
	}
}

func TestRPCGetBlockReceipts(t *testing.T) {
	t.Parallel()

	var (
		genBlocks  = 6
		backend, _ = setupReceiptBackend(t, genBlocks)
		api        = NewBlockChainAPI(backend)
	)
	blockHashes := make([]common.Hash, genBlocks+1)
	ctx := context.Background()
	for i := 0; i <= genBlocks; i++ {
		header, err := backend.HeaderByNumber(ctx, rpc.BlockNumber(i))
		if err != nil {
			t.Errorf("failed to get block: %d err: %v", i, err)
		}
		blockHashes[i] = header.Hash()
	}

	var testSuite = []struct {
		test rpc.BlockNumberOrHash
		file string
	}{
		// 0. block without any txs(hash)
		{
			test: rpc.BlockNumberOrHashWithHash(blockHashes[0], false),
			file: "number-0",
		},
		// 1. block without any txs(number)
		{
			test: rpc.BlockNumberOrHashWithNumber(0),
			file: "number-1",
		},
		// 2. earliest tag
		{
			test: rpc.BlockNumberOrHashWithNumber(rpc.EarliestBlockNumber),
			file: "tag-earliest",
		},
		// 3. latest tag
		{
			test: rpc.BlockNumberOrHashWithNumber(rpc.LatestBlockNumber),
			file: "tag-latest",
		},
		// 4. block with transfer tx(hash)
		{
			test: rpc.BlockNumberOrHashWithHash(blockHashes[1], false),
			file: "block-with-transfer-tx",
		},
		// 5. block with contract create tx(number)
		{
			test: rpc.BlockNumberOrHashWithNumber(rpc.BlockNumber(2)),
			file: "block-with-contract-create-tx",
		},

		// 6. block with contract call tx(hash)
		{
			test: rpc.BlockNumberOrHashWithHash(blockHashes[3], false),
			file: "block-with-contract-call-tx",
		},
		// 7. block with dynamic fee tx(number)
		{
			test: rpc.BlockNumberOrHashWithNumber(rpc.BlockNumber(4)),
			file: "block-with-dynamic-fee-tx",
		},
		// 8. block is empty
		{
			test: rpc.BlockNumberOrHashWithHash(common.Hash{}, false),
			file: "hash-empty",
		},
		// 9. block is not found
		{
			test: rpc.BlockNumberOrHashWithHash(common.HexToHash("deadbeef"), false),
			file: "hash-notfound",
		},
		// 10. block is not found
		{
			test: rpc.BlockNumberOrHashWithNumber(rpc.BlockNumber(genBlocks + 1)),
			file: "block-notfound",
		},
	}

	for i, tt := range testSuite {
		var (
			result interface{}
			err    error
		)
		result, err = api.GetBlockReceipts(context.Background(), tt.test)
		if err != nil {
			t.Errorf("test %d: want no error, have %v", i, err)
			continue
		}
		testRPCResponseWithFile(t, i, result, "qrl_getBlockReceipts", tt.file)
	}
}

func testRPCResponseWithFile(t *testing.T, testid int, result interface{}, rpc string, file string) {
	data, err := json.MarshalIndent(result, "", "  ")
	if err != nil {
		t.Errorf("test %d: json marshal error", testid)
		return
	}
	outputFile := filepath.Join("testdata", fmt.Sprintf("%s-%s.json", rpc, file))
	if os.Getenv("WRITE_TEST_FILES") != "" {
		os.WriteFile(outputFile, data, 0644)
	}
	want, err := os.ReadFile(outputFile)
	if err != nil {
		t.Fatalf("error reading expected test file: %s output: %v", outputFile, err)
	}
	require.JSONEqf(t, string(want), string(data), "test %d: json not match, want: %s, have: %s", testid, string(want), string(data))
}
